Problem : #leetcode 1482. Minimum Number of Days to Make m Bouquets

Problem link : https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/description/

Problem Statement : You are given an integer array bloomDay, an integer m and an integer k.

You want to make m bouquets. To make a bouquet, you need to use k adjacent flowers from the garden.

The garden consists of n flowers, the ith flower will bloom in the bloomDay[i] and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make m bouquets from the garden. If it is impossible to make m bouquets return -1.

 

Example 1:

Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let us see what happened in the first three days. x means flower bloomed and _ means flower did not bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.
Example 2:

Input: bloomDay = [1,10,3,10,2], m = 3, k = 2
Output: -1
Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.
Example 3:

Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3
Output: 12
Explanation: We need 2 bouquets each should have 3 flowers.
Here is the garden after the 7 and 12 days:
After day 7: [x, x, x, x, _, x, x]
We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.
After day 12: [x, x, x, x, x, x, x]
It is obvious that we can make two bouquets in different ways.
 

Constraints:

bloomDay.length == n
1 <= n <= 105
1 <= bloomDay[i] <= 109
1 <= m <= 106
1 <= k <= n

/***********************************************************************************************************/

APPROACHES TO SOLVE : 

1. Brute Force : we can solve this problem using linear search 
  #steps :
  1. find the range (min and maxi of the array) coz our ans will lie between both if possible
  2. create a function which will check the possible or not possible bloom  Day
  3. if the ans find return I 

  CODE BELOW
//////////////////////////

public class Minimum_no_of_Days_to_Make_M_Bouquets_Brute {
    // create a function which will check the possible or not possible day
    public static boolean possible(int arr[] , int day , int m , int k){
        int cnt = 0; //count the adjacent day
        int noOfbouquets = 0; // count the no of Bouquets
        int n = arr.length; // size of the array
        for(int i = 0; i<n; i++){

            // if the arr[i] less tha and equal to bloom day we have to increase cnt++
            if(arr[i] <= day){
                cnt++; // increment count by 1
            }
            // if any case fail
            else{
                noOfbouquets += (cnt/k); // calculate bouquets with adjacent value k
                cnt = 0; // if any case fail then make count as 0
            }
        }
        noOfbouquets += (cnt/k); // again calculate no of bouquets with adjacent k 
        return noOfbouquets >= m; // if the no of bouquets greater than and equal to m then return it
    }

    // create a function to check the ans exist or not
    public static int roseGarden(int arr[] , int k, int m){
        int n = arr.length; // size of the array
        long value = (long)m * k;
        // step1. to check not possible case
        
        if(value > n) return -1; // if the (m*k) greater than size of the array so we won't get our ans 

        // step2. find minimum and maximum (range)
        int mini = Integer.MAX_VALUE, maxi = Integer.MIN_VALUE;
        for(int i = 0; i<n; i++){
            mini = Math.min(mini , arr[i]);
            maxi = Math.max(maxi , arr[i]);
        }

        // step3. run a loop from between mini and maxi to find our ans
        for(int i = mini; i<= maxi; i++){

            // call possible function
            if(possible(arr, i, m, k)){
                return i; // if we get our ans return i 
            }
        }
        // if our ans(bloom day) does not exist return -1
        return -1;
    } // TC : O(min - max+1) x O(N)  // SC : O(1)
    public static void main(String args[]){
        int arr[] = {7, 7, 7, 7, 13, 11, 12, 7};
        int k = 3; // no of adjacent day to make a bouquets
        int m = 2; // no of bouquets
        int ans = roseGarden(arr, k, m);
        if(ans == -1){
            System.out.println(" We can not make m bouquet : ");
        }
        else{
            System.out.println("Minimum possible day to make m bouquets is : " +ans);
        }
    }
}


/******************************************************************************************/

2. OPTIMAl : we can solve this problem using Binary Search

  #steps : 
  1.  find the range (min and maxi of the array) coz our ans will lie between both if possible
  2. create a function which will check the possible or not possible bloom  Day
  3. Apply Binary Search 
  4. call possible function and pass mid
  5. if the ans found mid might be our ans and reduce right half to find minimum possible ans
  6. else if the (mid < bloom) means if we are not possible to create m bouquets..then   we reduce left half  because previous element before the mid will also not be our bloom Day  
  7. we can either return ans or the low coz low will started from not possible and at the end of the loop it will pointing to possile 


CODE BELOW
//////////////////////////////

public class Minimum_no_of_Days_to_Make_M_Bouquets_Opt {
    // create a function which will check the possible or not possible day
    public static boolean possible(int arr[] , int day , int m , int k){
        int cnt = 0; //count the adjacent day
        int noOfbouquets = 0; // count the no of Bouquets
        int n = arr.length; // size of the array
        for(int i = 0; i<n; i++){

            // if the arr[i] less tha and equal to bloom day we have to increase cnt++
            if(arr[i] <= day){
                cnt++; // increment count by 1
            }
            // if any case fail
            else{
                noOfbouquets += (cnt/k); // calculate bouquets with adjacent value k
                cnt = 0; // if any case fail then make count as 0
            }
        }
        noOfbouquets += (cnt/k); // again calculate no of bouquets with adjacent k 
        return noOfbouquets >= m; // if the no of bouquets greater than and equal to m then return it
    }
    public static int roseGarden(int arr[] , int k, int m){
        int n = arr.length; // size of the array
        long value = (long)m * k;
        // step1. to check not possible case
        
        if(value > n) return -1; // if the (m*k) greater than size of the array so we won't get our ans 

        // step2. find minimum and maximum (range)
        int mini = Integer.MAX_VALUE, maxi = Integer.MIN_VALUE;
        for(int i = 0; i<n; i++){
            mini = Math.min(mini , arr[i]);
            maxi = Math.max(maxi , arr[i]);
        }

        // step3. Apply Binary Search on between mini and maxi
        int low = mini , high = maxi;
        while(low <= high){
            int mid = (low + high)/2;
          //  int ans = -1;

            // call possible function
            if(possible(arr, mid, m, k)){
                // int ans = mid;
                // mid might be our ans but we need to find as small as possible 
                high = mid-1; // if we got our bloom day reduce right half and look on the left for minimum ans
            }
            // if the bloom day is lesser to create m bouquets
            // we can surely say that lesser than low won't be our ans.
            else{
                low = mid+1; // reduce left half and look for right 
            }
        }
        // we can surely say our ans is at low because low started from not possible
        // and at the end of the loop it will go to possible 
        // that's why we are returning low
        // we can either return  ans or low both pointing to the bloom day
          return low; 
    } // TC : O(min - max+1) x O(N)  // SC : O(1)
    public static void main(String args[]){
        int arr[] = {7, 7, 7, 7, 13, 11, 12, 7};
        int k = 3; // no of adjacent day to make a bouquets
        int m = 2; // no of bouquets
        int ans = roseGarden(arr, k, m);
        if(ans == -1){
            System.out.println(" We can not make m bouquet : ");
        }
        else{
            System.out.println("Minimum possible day to make m bouquets is : " +ans);
        }
    }
}


/*********************************************************************************************************/
  
